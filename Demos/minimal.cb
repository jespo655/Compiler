




// foo :: fn(i:uint)->r:int {
    // #C #string here printf("hello world!\n"); here;
    // i = 2;
    // i = 3;
    // i = i;
    // i2 : int;
    // i2 = foo(i);
// };

// foo2, a := foo(2), 2;


// foo2 :: fn()->r:int {
//     a : int;
//     a = foo(0);
// };



hw :: fn(i:int, j:int) {
    #C #string here printf("hello world #%d!\n", i); here;
};


main :: fn() {
    -3.hw(-3);
};


// i : int = i2; // TODO: this should fail with cyclic dependency
// i2 : int = i;

// i :: b;

// s :: struct {
//     i := 2;
// };

// s2 :: s;
// a : s2;
// b :: s2;


// a, b, c := -1.4, true, "here";
// d, e, f := a, b, c;


// d := a;

/*
main :: fn() {
    // #C "printf(\"asd\")";
    #C #string C_CODE print("Hello, World!"); C_CODE
};
*/

