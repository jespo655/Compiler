




vad som kompileras:
pass 1) statisk kompilering
alla global scope körs
varje statement identifieras, sparas i listan av statements.
    dock ej rekursivt - tex. vid decl så förs identifiers in i scope, men de får inga typer eller värden
    dependencies bör sättas upp om nödvändigt, tex. identifiers->decl statement
    använd fully_resolved-flaggan (dependencies)
definiera entry points, skapa ett workspace för varje och spara dem i en lista

pass 2) dynamisk kompilering av #run (compile time execution)
utgå från en entry point, börja dynamisk kompilering
    gå igenom varje statement, försök resolva direkt
    lös dependencies för alla identifiers som används
    det enda som inte skulle kunna resolvas direkt är saker som är beroende av andra #run
    om det händer:
        spara "bokmärke" så man kan fortsätta på det ställe i kompileringen där man slutade (eller så nära som möjligt)
        sätt upp dependancy på #run_2
        kolla att #run_2 inte har dependancy på #run_1 **
        börja dynamisk kompilering av #run_2
    varje statement utförs, Values blir skapade och förstörda, etc.

** Vid cyklisk dependancy av #runs:
    log_error cyklisk dependancy
    sätt flagga på #runs
    gå på nästa #run i listan

pass 3) dynamisk kompilering av entry point (c output)
utgå från den entry point som måste vara satt i pass 2
dynamisk kompilering från entry point, precis som i pass 2
istället för att köra, generera c-kod






skriv om literals:

endast 1 Literal-klass
Abstx-wrapper för Value

struct Literal : Evaluated_value {
    Value value;
    Literal() {}
    Literal(const Value& value) : value{value} {}
    Literal(Value&& value) : value{std::move(value)} {}
}

Varje typ har måste overloada get_default_value

virtual get_default_value() { return Literal(Value(get_type())); }


TODO:
    specialhantering för strängar
    specialhantering för dynamic seq





Range:  a..b, där a och b måste evaluata till double
Om a<b är default step 1
Om a>b är default step -1      <- nytt








#run kör funktionen och returnerar ett värde
#run är en subklass till Function_call
evaluate returnerar en std::vector<Value> som sen byggs in som literaler i abstx tree (#run-delen tas bort)




lägg till compile time funktioner för error handler



kolla upp gcc, se om jag hittar en version som implementerar c99-standarden korrekt
specifikt int_leastN_t som ska krävas av c99. Alternativ: hitta en senare standardspec
som kan användas med gcc, som har detta
    gcc * -std=c99










function syntax: tillåt void argument

pln void argument: skriv ut ", "
a:=1; pln(a,, #a); // 1, a=1


function syntax tillåt variabelt antal argument
foo := fn(rest : ..) {} // eller något liknande. Kolla jai demo!





potentiellt problem för compile time execution
spara pekare som values, sen ändra på det som pekarna pekar på
-> originalet ändras




reading a function:
funktionen sparas först med ett internt kompilatornamn
sparas i local scope




KANSKE TODO: kolla på regex, gör en state machine för syntax patterns för parser



using.h
    decide exact syntax and usage, before implementing the class



Add a type class that just holds a list of types
    Function_call->get_type() should return one of those



Debug_os::indent() -> indent(int steps=1)
int types: int_leastN_t, uint_leastN_t


add functions that gets the type from a vector<Evaluated_value> and vector<Evaluated_variable>
    the only special case is function_call, which can return a list of type

set_entry_point() flera gånger -> clash / error



struct Value { Type t; void* vp; } som kan användas för compile time exec.
Workspace: har en map str(id_name)->Value






check_types(std::vector<Evaluated_variable>, std::vector<Evaluated_value>)
    for use in assignment and declaration

virtual bool Abstx_node::try_resolve() = 0;


auto type = x->get_type();
if (x->fully_resolved) ASSERT(type != nullptr);
else if (type == nullptr) {
    if (!x->try_resolve()); {
        return; // maybe log something?
    }
    type = x->get_type();
    ASSERT(type != nullptr);
}


struct Type_defined_type : Type {
    std::shared_ptr<Type> identity;
    std::string name;
}


ATT TÄNKA PÅ:

Kanske: get_type() måste (KANSKE) returnera en const type, eller vara const själv.
(Måste man kalla get_type() på en typ? Man ska ju ändå alltid få Type_type i så fall)
(Att returnera en const type men inte själv vara const borde vara ok)











workspace

// global_scope har en workspace som parent (subklass till scope), och workspace har själv en pekare till global scope

Alla workspaces delar samma AST, men har olika entry points.
Alla #run skapar ett nytt workspace med den funktionen som entry point

Compiled_workspace är global / singleton; data i den kan ändras av compile-time fner


// någonstans globalt:
map<string, scope> global_scopes; // 1 global_scope per fil som kompileras




Compile_time exec tests:

Bygg funktioner manuellt, testa compile time execution av dem
 - någon bastyp-fn länkar till cpp-fner mha string fn-name. Switcha beroende på str.









Att sno från cm:
pln med syntax
toS() med användning
sequence literals
for-syntax
ord som infix-op (in, and, or, xor, etc.)
** för power (eller ^ ?)




Scope::get_x: recursive till parent, icke resursive till using scopes



Structs should have their own scope, instead of lists of identifiers


















// #run demo:
// TODO: lägg till compile time funktioner för error handler


#run print("hej");


foo := fn() -> int { return 2; }


a = #run foo(); // a = 2;
a = foo();


check_type := fn(t : type) -> bool {
    if (t == int) return true;
    if (t == float) return true;
    return false;
}


foo := fn(t : $T) -> T {
    #run check_type(T);
    return t;
}


foo := fn(t : int) -> int { return t; }





















operator overload syntax



infix_operator int ** int := fn(a:int, b:int)->r:int
{
    r=a;
    for (i in 1..b)
        r = r * a;
}

infix_operator bool USER_DEFINED_AND bool := fn(a:bool, b:bool)->bool
{
    return (a and b);
}

prefix_opreator ! int := fn(a:int)->int { return -a; }

suffix_operator int ++ := fn(a:int*) { *a = *a + 1; } // implicit cast från T till T* i funktionsanrop fungerar pga ingen overloading









kanske:

default values av return parameters som beror på inparametrar

foo := fn(a:int)->r:int=a {};
foo(2); // returns 2